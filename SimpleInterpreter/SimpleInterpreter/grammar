program        →  declaration* EOF ;

declaration    →  varDecl
               |  funDecl
               |  classDecl
               |  statement ;

funDecl        →  "fun" function ;

varDecl        →  "var" IDENTIFIER ( "=" expression )? ";" ;

classDecl      →  "class" IDENTIFIER "{" function* "}" ;

function       →  IDENTIFIER "(" parameters? ")" block ;
parameters     →  IDENTIFIER ( "," IDENTIFIER )* ;

statement      →  exprStmt
               |  ifStmt
               |  printStmt 
               |  whileStmt 
               |  returnStmt 
               |  forStmt
               |  block ;


exprStmt       →  expression ";" ;
ifStmt         →  "if" "(" expression ")" statement 
               (  "else" statement  )? ;
printStmt      →  "print" expression ";" ;
whileStmt      →  "while" "(" expression ")" statement ;
returnStmt     →  "return" expression? ";" ;
forStmt        →  "for" "(" ( varDecl | exprStmt | ";" )
                  expression? ";"
                  expression? ")" statement ;
block          →  "{" declaration* "}" ;


expression     →  assignment ;
assignment     →  ( call "." )? IDENTIFIER "=" assignment
               |  logic_or;

logic_or       →  logic_and ( "or" logic_and)* ;
logic_and      →  equality ( "and" equality)* ;


equality       →  comparison ( ( "!=" | "==" ) comparison )* ;
comparison     →  term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           →  factor ( ( "-" | "+" ) factor )* ;
factor         →  unary ( ( "/" | "*" ) unary )* ;
unary          →  ( "!" | "-" ) unary  | call ;
call           →  primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments      →  expression ( "," expression )* ;
primary        →  NUMBER | STRING | "true" | "false" | "nil"
               |  "(" expression ")" 
               |  IDENTIFIER ;
